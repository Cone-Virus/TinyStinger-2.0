# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
# Special Imports
from PyQt5.QtGui import QDesktopServices
from PyQt5.QtWidgets import QFileDialog
from PyQt5.QtCore import QUrl, QDir
import sqlite3
import time
import sys
import os
sys.path.append(os.path.abspath("src/"))
import db_maker as store
import scanner as scan
import command as com
import util
# Special Imports


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1200, 775)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setMinimumSize(QtCore.QSize(1200, 775))
        MainWindow.setMaximumSize(QtCore.QSize(1200, 775))
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.TopColorBar = QtWidgets.QFrame(self.centralwidget)
        self.TopColorBar.setGeometry(QtCore.QRect(100, 0, 1101, 101))
        self.TopColorBar.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.TopColorBar.setFrameShadow(QtWidgets.QFrame.Raised)
        self.TopColorBar.setObjectName("TopColorBar")
        self.TitleImage = QtWidgets.QLabel(self.centralwidget)
        self.TitleImage.setGeometry(QtCore.QRect(0, 0, 100, 100))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.TitleImage.sizePolicy().hasHeightForWidth())
        self.TitleImage.setSizePolicy(sizePolicy)
        self.TitleImage.setMinimumSize(QtCore.QSize(100, 100))
        self.TitleImage.setMaximumSize(QtCore.QSize(100, 100))
        self.TitleImage.setFrameShape(QtWidgets.QFrame.Box)
        self.TitleImage.setObjectName("TitleImage")
        self.verticalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(0, 100, 102, 631))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setSpacing(0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.scanButton = QtWidgets.QPushButton(self.verticalLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.scanButton.sizePolicy().hasHeightForWidth())
        self.scanButton.setSizePolicy(sizePolicy)
        self.scanButton.setMinimumSize(QtCore.QSize(100, 100))
        self.scanButton.setMaximumSize(QtCore.QSize(100, 100))
        self.scanButton.setObjectName("scanButton")
        self.verticalLayout.addWidget(self.scanButton)
        self.shellButton = QtWidgets.QPushButton(self.verticalLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.shellButton.sizePolicy().hasHeightForWidth())
        self.shellButton.setSizePolicy(sizePolicy)
        self.shellButton.setMinimumSize(QtCore.QSize(100, 100))
        self.shellButton.setMaximumSize(QtCore.QSize(100, 100))
        self.shellButton.setObjectName("shellButton")
        self.verticalLayout.addWidget(self.shellButton)
        spacerItem = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout.addItem(spacerItem)
        self.stackedWidget = QtWidgets.QStackedWidget(self.centralwidget)
        self.stackedWidget.setGeometry(QtCore.QRect(100, 100, 1101, 631))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.stackedWidget.sizePolicy().hasHeightForWidth())
        self.stackedWidget.setSizePolicy(sizePolicy)
        self.stackedWidget.setObjectName("stackedWidget")
        self.runPage = QtWidgets.QWidget()
        self.runPage.setObjectName("runPage")
        self.DB_Submit = QtWidgets.QPushButton(self.runPage)
        self.DB_Submit.setGeometry(QtCore.QRect(50, 40, 89, 31))
        self.DB_Submit.setObjectName("DB_Submit")
        self.Target_File_Select = QtWidgets.QPushButton(self.runPage)
        self.Target_File_Select.setGeometry(QtCore.QRect(50, 120, 89, 31))
        self.Target_File_Select.setObjectName("Target_File_Select")
        self.Target_FIle_Display = QtWidgets.QTextBrowser(self.runPage)
        self.Target_FIle_Display.setGeometry(QtCore.QRect(150, 120, 361, 31))
        self.Target_FIle_Display.setObjectName("Target_FIle_Display")
        self.DB_Name = QtWidgets.QTextBrowser(self.runPage)
        self.DB_Name.setGeometry(QtCore.QRect(50, 0, 271, 31))
        self.DB_Name.setObjectName("DB_Name")
        self.Targets_Name = QtWidgets.QTextBrowser(self.runPage)
        self.Targets_Name.setGeometry(QtCore.QRect(50, 80, 271, 31))
        self.Targets_Name.setObjectName("Targets_Name")
        self.Scan_Text = QtWidgets.QTextBrowser(self.runPage)
        self.Scan_Text.setGeometry(QtCore.QRect(530, 0, 571, 631))
        self.Scan_Text.setObjectName("Scan_Text")
        self.Exclusions_Name = QtWidgets.QTextBrowser(self.runPage)
        self.Exclusions_Name.setGeometry(QtCore.QRect(50, 160, 271, 31))
        self.Exclusions_Name.setObjectName("Exclusions_Name")
        self.Exclusion_File_Select = QtWidgets.QPushButton(self.runPage)
        self.Exclusion_File_Select.setGeometry(QtCore.QRect(50, 200, 89, 31))
        self.Exclusion_File_Select.setObjectName("Exclusion_File_Select")
        self.Exclusion_FIle_Display = QtWidgets.QTextBrowser(self.runPage)
        self.Exclusion_FIle_Display.setGeometry(QtCore.QRect(150, 200, 361, 31))
        self.Exclusion_FIle_Display.setObjectName("Exclusion_FIle_Display")
        self.HTTP_Name = QtWidgets.QTextBrowser(self.runPage)
        self.HTTP_Name.setGeometry(QtCore.QRect(50, 240, 271, 31))
        self.HTTP_Name.setObjectName("HTTP_Name")
        self.HTTP_Selection = QtWidgets.QComboBox(self.runPage)
        self.HTTP_Selection.setGeometry(QtCore.QRect(330, 240, 181, 31))
        self.HTTP_Selection.setObjectName("HTTP_Selection")
        self.HTTP_Selection.addItem("")
        self.HTTP_Selection.addItem("")
        self.HTTP_Selection.addItem("")
        self.SpiderD_Name = QtWidgets.QTextBrowser(self.runPage)
        self.SpiderD_Name.setGeometry(QtCore.QRect(50, 280, 271, 31))
        self.SpiderD_Name.setObjectName("SpiderD_Name")
        self.Spider_Depth_Value = QtWidgets.QSpinBox(self.runPage)
        self.Spider_Depth_Value.setGeometry(QtCore.QRect(330, 280, 61, 31))
        self.Spider_Depth_Value.setMinimum(1)
        self.Spider_Depth_Value.setSingleStep(0)
        self.Spider_Depth_Value.setObjectName("Spider_Depth_Value")
        self.Threads_Name = QtWidgets.QTextBrowser(self.runPage)
        self.Threads_Name.setGeometry(QtCore.QRect(50, 320, 271, 31))
        self.Threads_Name.setObjectName("Threads_Name")
        self.Threads_Value = QtWidgets.QSpinBox(self.runPage)
        self.Threads_Value.setGeometry(QtCore.QRect(330, 320, 61, 31))
        self.Threads_Value.setMinimum(0)
        self.Threads_Value.setMaximum(500)
        self.Threads_Value.setSingleStep(0)
        self.Threads_Value.setProperty("value", 20)
        self.Threads_Value.setObjectName("Threads_Value")
        self.pushButton = QtWidgets.QPushButton(self.runPage)
        self.pushButton.setGeometry(QtCore.QRect(0, 600, 89, 25))
        self.pushButton.setObjectName("pushButton")
        self.DB_Name_Line = QtWidgets.QLineEdit(self.runPage)
        self.DB_Name_Line.setGeometry(QtCore.QRect(150, 40, 361, 31))
        self.DB_Name_Line.setObjectName("DB_Name_Line")
        self.Run_Button = QtWidgets.QPushButton(self.runPage)
        self.Run_Button.setGeometry(QtCore.QRect(50, 360, 461, 111))
        self.Run_Button.setObjectName("Run_Button")
        self.stackedWidget.addWidget(self.runPage)
        self.shellPage = QtWidgets.QWidget()
        self.shellPage.setObjectName("shellPage")
        self.shellView = QtWidgets.QTextBrowser(self.shellPage)
        self.shellView.setGeometry(QtCore.QRect(530, 0, 571, 631))
        self.shellView.setObjectName("shellView")
        self.shellCombo = QtWidgets.QComboBox(self.shellPage)
        self.shellCombo.setGeometry(QtCore.QRect(330, 50, 191, 31))
        self.shellCombo.setObjectName("shellCombo")
        self.shellCombo.addItem("")
        self.shellCombo.addItem("")
        self.shellText = QtWidgets.QTextBrowser(self.shellPage)
        self.shellText.setGeometry(QtCore.QRect(330, 0, 191, 41))
        self.shellText.setObjectName("shellText")
        self.shellList = QtWidgets.QListWidget(self.shellPage)
        self.shellList.setGeometry(QtCore.QRect(0, 50, 321, 581))
        self.shellList.setObjectName("shellList")
        self.Shell_DB_Name = QtWidgets.QTextBrowser(self.shellPage)
        self.Shell_DB_Name.setGeometry(QtCore.QRect(60, 0, 261, 41))
        self.Shell_DB_Name.setObjectName("Shell_DB_Name")
        self.Shell_DB_Button = QtWidgets.QPushButton(self.shellPage)
        self.Shell_DB_Button.setGeometry(QtCore.QRect(10, 0, 41, 41))
        self.Shell_DB_Button.setObjectName("Shell_DB_Button")
        self.stackedWidget.addWidget(self.shellPage)
        self.horizontalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(0, 730, 1201, 27))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setSpacing(0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.githubLink = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.githubLink.sizePolicy().hasHeightForWidth())
        self.githubLink.setSizePolicy(sizePolicy)
        self.githubLink.setMinimumSize(QtCore.QSize(25, 25))
        self.githubLink.setMaximumSize(QtCore.QSize(25, 25))
        self.githubLink.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("src/images/GitHub-Mark.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.githubLink.setIcon(icon)
        self.githubLink.setObjectName("githubLink")
        self.horizontalLayout.addWidget(self.githubLink)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.stackedWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # ADDED
        # Values
        self.thread = self.Threads_Value.value()
        self.sdepth = self.Spider_Depth_Value.value()
        self.httpOpt = self.HTTP_Selection.currentText()
        self.db = ""
        self.shellOpt = self.shellCombo.currentText()
        self.url = ""
        self.target_file_name = ""
        self.exclusion_file_name = ""
        self.db_holder = ""
        # Connections
        self.Shell_DB_Button.clicked.connect(lambda: self.load_DB())
        self.pushButton.clicked.connect(lambda: self.reset())
        self.Run_Button.clicked.connect(lambda: self.run_scan())
        self.DB_Submit.clicked.connect(lambda: self.get_db_name())
        self.DB_Name_Line.returnPressed.connect(lambda: self.get_db_name())
        self.Exclusion_File_Select.clicked.connect(lambda: self.get_exclusion_file())
        self.Target_File_Select.clicked.connect(lambda: self.get_target_file())
        self.Threads_Value.valueChanged.connect(lambda: self.thread_selection())
        self.Spider_Depth_Value.valueChanged.connect(lambda: self.sdepth_selection())
        self.scanButton.clicked.connect(lambda: self.stackedWidget.setCurrentWidget(self.runPage))
        self.shellButton.clicked.connect(lambda: self.stackedWidget.setCurrentWidget(self.shellPage))
        self.shellList.itemSelectionChanged.connect(lambda: self.grab_item())
        self.shellCombo.currentIndexChanged.connect(lambda: self.shell_selection())
        self.HTTP_Selection.currentIndexChanged.connect(lambda: self.http_selection())
        self.githubLink.clicked.connect(lambda: QDesktopServices.openUrl(QUrl("https://github.com/Cone-Virus")))

    def fill_table(self):
        value = com.grab_list(self.db)
        for X in value:
            Y = X[0]
            self.shellList.addItem(str(Y))

    def grab_item(self):
        item = self.shellList.currentItem()
        self.url = item.text()
        self.write_shell()

    def write_shell(self):
        if self.url != "":
            self.shellView.clear()
            self.shellView.append(com.get_values(self.db,self.url,self.shellOpt))

    def shell_selection(self):
        self.shellOpt = self.shellCombo.currentText()
        self.write_shell()

    def http_selection(self):
        self.httpOpt = self.HTTP_Selection.currentText()

    def sdepth_selection(self):
        self.sdepth = self.Spider_Depth_Value.value()

    def thread_selection(self):
        self.thread = self.Threads_Value.value()
        
    def get_target_file(self):
        dialog = QFileDialog()
        dialog.setFileMode(QFileDialog.AnyFile)
        dialog.setFilter(QDir.Files)

        if dialog.exec_():
            self.target_file_name = dialog.selectedFiles()
            self.target_file_name = self.target_file_name[0]
            name = self.target_file_name.split('/')[-1]
            self.Target_FIle_Display.setPlainText(name)

    def get_exclusion_file(self):
        dialog = QFileDialog()
        dialog.setFileMode(QFileDialog.AnyFile)
        dialog.setFilter(QDir.Files)

        if dialog.exec_():
            self.exclusion_file_name = dialog.selectedFiles()
            self.exclusion_file_name = self.exclusion_file_name[0]
            name = self.exclusion_file_name.split('/')[-1]
            self.Exclusion_FIle_Display.setPlainText(name)

    def get_db_name(self):
        self.db_holder = self.DB_Name_Line.text()
        if self.db_holder != "":
            if com.db_validator(self.db_holder):
                self.DB_Name_Line.setEnabled(False)
            else:
                self.DB_Name_Line.clear()
                self.db_holder = ""
        else:
            self.db_holder = ""
    
    # Reset
    def reset(self):
        self.Scan_Text.clear()
        self.DB_Name_Line.clear()
        self.shellList.clear()
        self.shellView.clear()
        self.Shell_DB_Name.clear()
        self.Exclusion_FIle_Display.clear()
        self.Target_FIle_Display.clear()
        self.DB_Name_Line.setEnabled(True)
        self.exclusion_file_name = ""
        self.target_file_name = ""
        self.db_holder = ""

    # Load DB
    def load_DB(self):
        dialog = QFileDialog()
        dialog.setFileMode(QFileDialog.AnyFile)
        dialog.setFilter(QDir.Files)
        if dialog.exec_():
            self.db_holder = dialog.selectedFiles()
            if store.load_db(self.db_holder[0],0):
                self.db = store.load_db(self.db_holder[0],1)
                name = self.db_holder[0].split('/')[-1]
                self.Shell_DB_Name.setPlainText(name)
                self.shellList.clear()
                self.shellView.clear()
                self.fill_table()


    # General Scan
    def run_scan(self):
        banner = util.banner()
        self.Scan_Text.append(banner)
        self.Scan_Text.append("[+] Scan started at: " + time.asctime((time.localtime(time.time()))))
        QtCore.QCoreApplication.processEvents()
        # Create DB
        db = store.create_db(self.db_holder)
        self.Scan_Text.append("[+] DB Created")
        QtCore.QCoreApplication.processEvents()

        nohttp = True
        xnohttp = True

        if self.httpOpt == "HTTP If Required":
            nohttp = False
        elif self.httpOpt == "No HTTP":
            xnohttp = False

        # Scan targets in file
        target_list = util.target_format(scan.http_valid(scan.subdomain_finder(util.file_read("Target",self.target_file_name)),nohttp,xnohttp,self.thread))
        self.Scan_Text.append("[+] Targets validated and subdomains found")
        QtCore.QCoreApplication.processEvents()

        # If blacklist given
        if self.exclusion_file_name != "":
            target_list = scan.remove_exclusions(util.file_read("Exclusion",self.exclusion_file_name),target_list)
            self.Scan_Text.append("[+] Exclusions Removed")
            QtCore.QCoreApplication.processEvents()
            
        # Scan
        for target in target_list:
            # Create Storage dir
            directory = store.target_db(target,self.db_holder)
            # List Target
            self.Scan_Text.append("\n[+] " + target)
            QtCore.QCoreApplication.processEvents()
            # WAF Scan
            waf_result = scan.waf_scan(target)
            self.Scan_Text.append("[+] WAF Scan Done")
            QtCore.QCoreApplication.processEvents()
            # Fav Scan
            fav_result = scan.fav_scan(target)
            self.Scan_Text.append("[+] Fav Scan Done")
            QtCore.QCoreApplication.processEvents()
            # Spider Scan
            spider_result = scan.spider_scan(target,directory,str(self.sdepth))
            self.Scan_Text.append("[+] Spidering Done")
            QtCore.QCoreApplication.processEvents()
            value = [target,waf_result,fav_result,spider_result]
            store.insert_db(db,value)


        self.Scan_Text.append("\n[+] Scan Finished at: " + time.asctime((time.localtime(time.time()))))
        QtCore.QCoreApplication.processEvents()
        self.db = db
        self.fill_table()
        self.stackedWidget.setCurrentWidget(self.shellPage)

        # ADDED


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "TinyStinger V2.0"))
        self.TitleImage.setText(_translate("MainWindow", "TextLabel"))
        self.scanButton.setText(_translate("MainWindow", "Scan"))
        self.shellButton.setText(_translate("MainWindow", "Shell"))
        self.DB_Submit.setText(_translate("MainWindow", "Submit"))
        self.Target_File_Select.setText(_translate("MainWindow", "Select"))
        self.DB_Name.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Ubuntu\'; font-size:11pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:12pt;\">DB Name</span></p></body></html>"))
        self.Targets_Name.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Ubuntu\'; font-size:11pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:12pt;\">Targets File</span></p></body></html>"))
        self.Exclusions_Name.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Ubuntu\'; font-size:11pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:12pt;\">Exclusion File</span></p></body></html>"))
        self.Exclusion_File_Select.setText(_translate("MainWindow", "Select"))
        self.HTTP_Name.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Ubuntu\'; font-size:11pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:12pt;\">HTTP Options</span></p></body></html>"))
        self.HTTP_Selection.setItemText(0, _translate("MainWindow", "No HTTP"))
        self.HTTP_Selection.setItemText(1, _translate("MainWindow", "HTTP If Required"))
        self.HTTP_Selection.setItemText(2, _translate("MainWindow", "Any"))
        self.SpiderD_Name.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Ubuntu\'; font-size:11pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:12pt;\">Spider Depth</span></p></body></html>"))
        self.Threads_Name.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Ubuntu\'; font-size:11pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:12pt;\">Threads</span></p></body></html>"))
        self.pushButton.setText(_translate("MainWindow", "Reset"))
        self.Run_Button.setText(_translate("MainWindow", "Run"))
        self.shellCombo.setItemText(0, _translate("MainWindow", "Spider"))
        self.shellCombo.setItemText(1, _translate("MainWindow", "Stats"))
        self.shellText.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Ubuntu\'; font-size:11pt; font-weight:400; font-style:normal;\">\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'Sans Serif\'; font-size:18pt;\">Results</span></p></body></html>"))
        self.Shell_DB_Button.setText(_translate("MainWindow", "DB"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())

